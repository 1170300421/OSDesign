磁盘扇区 – 内存缓冲区 – 内存
文件存放在磁盘上，磁盘的访问速度远远低于内存，如果每次读一个字节或写一个字节都要去访问磁盘，那么文件的读写速度就会慢的无法忍受。
操作系统在接收到读文件请求时，哪怕只要读一个字节，操作系统也会一下就把一片数据（通常至少是512字节，因为磁盘的一个扇区就是512字节）都读取到一个操作系统自己管理的内存缓冲区中，那么要读下一个字节的时候，就不需要访问磁盘，直接从该缓冲区中读取就可以了。
操作系统接收到写文件的请求的时候，也是先把要写入的数据在一个内存缓冲区中保存起来，等缓冲区满了，再将缓冲区内容全部写入磁盘。
关闭文件的操作就能确保内存缓冲区中的数据被写入磁盘

1.        文件

        先说文件定义，根据《操作系统概念》所言，文件是记录在外存上的相关信息具有名称的集合。这里有一点，文件是存放在外存的，这是由于内存的断电易失性质导致的，虽然内存速度快，但是仍然需要文件来稳定地存放文件。而对于用户来说，文件是逻辑外存地最小分配单元，即数据只能通过文件的方式写到外存。

    文件有一定的属性，一般来说包括：名称，标识符（唯一标签，通常为数字），类型，位置，大小，保护（决定访问控制信息），时间、日期和用户标识等。下图为笔者在ubuntu中随手测试的截图，可以看到从左依次可以看到访问控制，文件数、拥有者、所属的group、文件大小、建档日期、文件名等属性。所有文件的信息都保存在目录结构中，并随目录结构存放在外存中。
文件作为一种抽象数据类型，显然需要定义一些基本的操作，具体应当包括：创建，写，读，重定位，删除，截短6个基本操作。这些文件操作总是涉及为给定文件搜索相关目录条目，这种情况下，操作系统维护一个包含所有打开文件的信息表——打开文件表，就会避免一些不必要的搜索操作。这个表的建立主要是通过在首次打开文件时，使用系统调用open()。

    这里讲一下open()系统调用。可以分为五步：（1）进程向os提供文件路径名（2）os查询硬盘上的文件属性（3）从硬盘返回文件属性（4）os把一个文件描述符和这个文件属性联系起来，一般来说是一个number（5）os把文件描述符返回给进程，这时进程就取得了这个文件，可以通过这个描述符访问文件具体内容。同样，进程同样维护一个内部的打开文件表，并指向系统表的相应条目。应当注意到，这个过程中实际上只涉及了路径名、文件属性，并没有具体的文件内容。

    此外，文件系统设计时，文件类型是必须考虑的，具体要考虑到文件类型的识别和系统支持与否。实现文件类型的常见技术是扩展名，一般包括在文件名当中，绝大多数os允许用户将文件命名为一组字符，加上dot，跟着是扩展部分。UNIX还采用了幻数的方法，作为辅助标识文件类型的手段。除此以外，针对不同的系统，如TOPS-20、Mac OS X等，在文件类型的处理上各有差异，此不赘述。而文件类型决定了文件的内部结构，以适应相应处理程序的要求。同时，文件结构也受到不同操作系统的要求。显然，os支持常用文件结构是有用的，但是支持过多就会导致系统过大和程序员混淆，过犹不及。

    文件是用来存储信息的，既然有了文件的属性信息、基本操作、类型结构等，下面就要谈及文件的访问，否则文件没有存在的意义。这里主要从访问方法的层面来分析。在支持多种访问方式的系统中，针对不同应用访问方法的选择尤为重要。（1）顺序访问（2）直接访问（3）其他访问，一般建立在直接访问方式之上，通常设计文件索引，包含各块指针的结构称为索引包。针对大文件，索引较大难以存放在内存中，可以创建多级索引，即为索引文件再创建索引。

考虑到当今计算机文件系统十分庞大，文件数目繁多，故而产生了目录，目的是更好地组织文件并加以管理。目录应包含相关操作操作：搜索文件、删除文件、创建文件、遍历目录、重命名文件、跟踪文件系统，这些操作在设计目录逻辑结构时要着重考虑。定义目录结构地常用方案有：单层结构目录，双层结构目录，树状结构目录，无环图目录，通用图目录。前三种方案可以看作逐渐拓展，本质都属于树状结构。

文件共享是一种十分有用的功能，一般不论怎样，面向用户地操作系统都需要提供文件共享功能。在多用户情景下，为了实现共享和保护，文件必须维护更多的文件属性，现在常用的方法是，拥有者和组的概念，拥有者有最高的权限，不同组可以设置不同的授权，在既定权限的限制下，可以实现同组、不同组用户之间的文件共享。针对远程文件进系统，有三种实现方式：（1）通过应用程序进行人工传输（2）分布式文件系统，可以直接访问远程目录（3）万维网，类似第一种，通过浏览器获取对远程文件的访问。

文件在计算机系统中，需要有一定的方式保护其安全，包括可靠性和防止非法访问两方面。前者通常通过文件备份来实现。后者对不同的访问类型加以区分并进行限制。访问类型有：读、写、执行、添加、删除、列表清单。实现访问控制的手段最普通的方案就是为每个目录、文件增加一个访问控制表，针对每一个用户设置权限。这样比较没有效率，精简方法就是分组，这实际上在前面文件共享部分有所提及。如下最左侧的属性实际就是访问权限的设置。r是读，w是写，x是执行，三个为一组，从左到左右依次是拥有者、组成员、其他访问者的权限。

2.        文件系统

文件系统的结构包括不同的层次，I/O控制为最底层，基本文件系统负责向设备驱动程序发送一般命令，文件组织模块则知道文件机器逻辑和物理块，可以将逻辑块地址转化为物理块地址，逻辑文件系统管理元数据，包括文件系统的所有结构数据。通过分层结构管理，能减少重复代码。例如相同的I/O控制模块可以被多个文件系统采用。

在磁盘上，文件系统可能包含的信息有：如何启动存储的操作系统、总的块数、空闲块的数目和位置、目录结构和具体文件。

现代操作系统必须同时支持多个文件系统类型，如何把多个文件系统整合成一个目录结构是需要解决的问题，如果采用为每个类型编写目录和文件程序是一种显然的方法但是不能令人满意。我们可以采用一种方法，将基本系统调用的功能和实现细节分开，这就 是虚拟文件系统技术。在这种技术下，文件系统实现分为三层，第一层为文件

系统接口，第二层是虚拟文件系统层，其目的有二：（1）定义一个清晰的VFS结构，分开文件系统的通用操作和具体实现（2）提供了在网络上唯一标识一个文件的机制。第三层实现文件系统类型或远程文件系统协议。

目录分配和管理是文件系统中重要的一环。使用存储文件名和数据块指针的线性列表是最简单的方法，这种方法有致命的缺点是需要线性搜索，访问速度会比较慢。除此之外，另一个用于文件目录的结构是哈希表，根据文件名得到一个值，并返回一个指向线性列表中元素的指针，这就大大减少了目录搜索时间。

磁盘本身是可以直接访问的，这就使灵活实现文件成为可能。为文件分配空间，以有效地使用磁盘和快速访问，就要求有一个合理的分配方法，通常的方法主要有三个：连续、链接和索引。

连续分配要求每个文件在磁盘上占有一组连续的块。这种情况下，访问连续分配文件，磁盘的寻道数最小，故而寻道时间也最短。但是连续分配问题在于，访问另一个不同的新文件时有些困难，被选择来管理空闲空间的系统决定了这个任务如何完成。连续磁盘空间分配作为动态存储分配的一个具体应用，常用策略是首次适合和最优适合，模拟结果都比最坏适合要好。但是这些算法都有外部碎片问题。合并的方法可以解决这个问题，但代价是时间。另外，难以确定一个文件需要的空间大小。太小会导致文件难以扩展，即使预知，文件缓慢增长期间，也会造成很多碎片。修正的连续分配方案，在空间不足时，另一块被称为扩展的连续空间会被添加到原来的分配中。文件块的位置就成为开始地址、块数、加上指向下一个扩展的指针。

链接分配则不存在上述连续分配的问题。链接分配下，每个文件是磁盘块的链表，这些磁盘块分布在磁盘的任何地方。目录包括文件头指针和尾部指针。这样扩展起来是非常方便的，只要有空闲块就可以增大文件。但是此方法也有缺点，即不能有效的支持文件的随机访问，必须从文件的开始读起。链接分配一种变种是FAT，目录条目含有文件首块的块号码，根据块号码索引的FAT条目包含文件下一个的块号码。这条链会一直继续到最后一块。

索引分配将所有指针放在一起，通过索引块，解决了链接分配不用FAT就无法直接访问的问题。每个文件都有索引块，这是一个磁盘块地址的数组。这里存在一个需要解决的问题——索引块的大小该如何确定，有三种方案：（1）链接方案（2）多层索引（3）组合方案。

空闲空间管理，一般来说，系统维护一个空闲空间链表来进行空闲空间管理。称为链表，但不一定表现为链表。通常，空闲空间表实现为位图或位向量，每块对应一位，空闲为1，占用反之。另一种方法是将所有空闲磁盘用链表链接起来，并将指向第一个空闲块的指针保存在磁盘的特殊位置。由于遍历不是一个经常性操作，所以也是可以接受的方案。对空闲链表的一个改进是将n个空闲块的地址存放在第一个空闲块中，前n-1个确实为空，最后一个包含另外n个空闲块的地址，这样的话，大量的空闲块地址可以很快的找到。另外一种方法是，记录第一块的地址和紧跟第一块的连续的空闲块的数量n，这样空闲空间表的每个条目包含磁盘地址和数量。虽然每个条目回会比原来需要更多的空间，但是表的长度会更短，这是因为连续块的数量常常大于1。

由于文件和目录可保存在内存和磁盘上，所以必须确保系统失败不会导致数据丢失和数据的不一致性。所以我们需要一致性检查、备份和恢复。一致性检查程序将目录结构数据与磁盘数据块相比较，并试图纠正所发现的不一致，分配算法和空闲空间管理算法决定了检查程序所能发现的问题，以及如何纠正问题。

此外，为了保证一致性，还可以采用基于日志的文件系统——执行一个特殊任务的一组操作称为事务，要执行事务时会先将元数据记录到日志上，这些修改一旦写到日志上，就会视为已提交，系统调用就可以返回到用户程序，以允许继续执行，而一旦事务已经完成，就会从日志文件里删除。这种情况下，如果系统崩溃，事务被中断，日志中的事务仍必须要完成，这就保证了文件系统结构的一致性。


虚拟内存

虚拟内存是计算机系统内存管理的一种技术。它使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。目前，大多数操作系统都使用了虚拟内存，如Windows家族的“虚拟内存”；Linux的“交换空间”等。
虚拟内存别称虚拟存储器（Virtual Memory）。电脑中所运行的
程序均需经由内存执行，若执行的程序占用内存很大或很多，则会导致内存消耗殆尽。为解决该问题，Windows中运用了虚拟内存技术，即匀出一部分硬盘空间来充当内存使用。当内存耗尽时，电脑就会自动调用硬盘来充当内存，以缓解内存的紧张。若计算机运行程序或操作所需的随机存储器(RAM)不足时，则 Windows 会用虚拟存储器进行补偿。它将计算机的RAM和硬盘上的临时空间组合。当RAM运行速率缓慢时，它便将数据从RAM移动到称为“分页文件”的空间中。将数据移入分页文件可释放RAM，以便完成工作。 一般而言，计算机的RAM容量越大，程序运行得越快。若计算机的速率由于RAM可用空间匮乏而减缓，则可尝试通过增加虚拟内存来进行补偿。但是，计算机从RAM读取数据的速率要比从硬盘读取数据的速率快，因而扩增RAM容量（可加内存条）是最佳选择。 [2] 
虚拟内存是Windows 为作为内存使用的一部分硬盘空间。虚拟内存在硬盘上其实就是为一个硕大无比的文件，文件名是PageFile.Sys，通常状态下是看不到的。必须关闭资源管理器对系统文件的保护功能才能看到这个文件。虚拟内存有时候也被称为是“页面文件”就是从这个文件的文件名中来的。 [2] 
内存在计算机中的作用很大，电脑中所有运行的程序都需要经过内存来执行，如果执行的程序很大或很多，就会导致内存消耗殆尽。为了解决这个问题，WINDOWS运用了虚拟内存技术，即拿出一部分硬盘空间来充当内存使用，这部分空间即称为虚拟内存，虚拟内存在硬盘上的存在形式就是 PAGEFILE.SYS这个页面文件

工作原理
虚拟存储器是由硬件和操作系统自动实现存储信息调度和管理的。它的工作过程包括6个步骤： 
①中央处理器访问主存的逻辑地址分解成组号a和组内地址b，并对组号a进行地址变换，即将逻辑组号a作为索引，查地址变换表，以确定该组信息是否存放在主存内。 
②如该组号已在主存内，则转而执行④；如果该组号不在主存内，则检查主存中是否有空闲区，如果没有，便将某个暂时不用的组调出送往辅存，以便将这组信息调入主存。 
③从辅存读出所要的组，并送到主存空闲区，然后将那个空闲的物理组号a和逻辑组号a登录在地址变换表中。 [3] 
④从地址变换表读出与逻辑组号a对应的物理组号a。 
⑤从物理组号a和组内字节地址b得到物理地址。 
⑥根据物理地址从主存中存取必要的信息

现在以 Windows系统为例来看看虚拟内存是如何设置的。 Windows系统使用内存虚拟技术，比较圆满地解决了物理内存不足所引起的问题。在 Windows中，虚拟内存其实是一个容量很大的文件 pagefile. sys，称之为页面文件。页面文件具有系统和隐藏属性，正常情况是看不见的，只有在“文件夹选项”对话框中将“隐藏受保护的操作系统文件”和“不显示隐藏的文件和文件夹”这两项的钩去掉后才能看见。 [7] 
在 Windows桌面上的“我的电脑”单击鼠标右键，在菜单中点击“属性”，在高级选项卡中的性能一栏里点击设置，再在“性能选项”中选择“高级”选项，就会在下面出现虚拟内存一栏。鼠标单击“更改”按钮，随后就会打开“虚拟内存”设置对话框。 [7] 
Windows的虚拟内存设置页面文件可以放置于系统中的联机的任何一个硬盘驱动器上。这个虚拟内存的大小可以自定义，并且是动态变化的，需要设置初始大小和最大值；也可以选择不用人工分配，由操作系统自动来管理;当然，还可以设置为无页面文件，这样系统就没有虚拟内存了，系统的运行可能会因此受影响，所以，通常不要这样设置

进程管理
进程是正在运行的程序实体，并且包括这个运行的程序中占据的所有系统资源，比如说CPU（寄存器），IO,内存，网络资源等。很多人在回答进程的概念的时候，往往只会说它是一个运行的实体，而会忽略掉进程所占据的资源。比如说，同样一个程序，同一时刻被两次运行了，那么他们就是两个独立的进程。linux下查看系统进程的命令是ps

并发程序和顺序程序有本质上的差别，为了能更好地描述程序的并发执行，实现操作系统的并发性和共享性，引入“进程”的概念。
进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，是系统进行资源分配和调度的一个独立单位。
处理器是计算机系统中最重要的资源。在现代计算机系统中，为了提高系统的资源利用率，CPU将为某一程序独占。通常采用多道程序设计技术，即允许多个程序同时进入计算机系统的内存并运行

I/O 缓冲区
概念

如高速缓存（cache）产生的原理类似，在I/O过程中，读取磁盘的速度相对内存读取速度要慢的多。因此为了能够加快处理数据的速度，需要将读取过的数据缓存在内存里。而这些缓存在内存里的数据就是高速缓冲区（buffer cache），下面简称为“buffer”。

具体来说，buffer（缓冲区）是一个用于存储速度不同步的设备或优先级不同的设备之间传输数据的区域。一方面，通过缓冲区，可以使进程之间的相互等待变少，从而使从速度慢的设备读入数据时，速度快的设备的操作进程不发生间断。另一方面，可以保护硬盘或减少网络传输的次数。

Buffer和Cache

buffer和cache是两个不同的概念：cache是高速缓存，用于CPU和内存之间的缓冲；buffer是I/O缓存，用于内存和硬盘的缓冲；简单的说，cache是加速“读”，而buffer是缓冲“写”，前者解决读的问题，保存从磁盘上读出的数据，后者是解决写的问题，保存即将要写入到磁盘上的数据。

Buffer Cache和 Page Cache

buffer cache和page cache都是为了处理设备和内存交互时高速访问的问题。buffer cache可称为块缓冲器，page cache可称为页缓冲器。在linux不支持虚拟内存机制之前，还没有页的概念，因此缓冲区以块为单位对设备进行。在linux采用虚拟内存的机制来管理内存后，页是虚拟内存管理的最小单位，开始采用页缓冲的机制来缓冲内存。Linux2.6之后内核将这两个缓存整合，页和块可以相互映射，同时，页缓存page cache面向的是虚拟内存，块I/O缓存Buffer cache是面向块设备。需要强调的是，页缓存和块缓存对进程来说就是一个存储系统，进程不需要关注底层的设备的读写。

buffer cache和page cache两者最大的区别是缓存的粒度。buffer cache面向的是文件系统的块。而内核的内存管理组件采用了比文件系统的块更高级别的抽象：页page，其处理的性能更高。因此和内存管理交互的缓存组件，都使用页缓存。
用户通过对文件的存取来完成对文件的修改、追加和搜索等操作。常用的存取方法有顺序存取法、随机存取法（直接存取法）和按键存取法三种。
顺序存取法
是按照文件的逻辑地址顺序存取，在记录式文件中，这反映为按记录的排列顺序来存取，在无结构的字符流文件中，顺序存取反映当前读写指针的变化。
随机存取法
允许用户根据记录的编号来存取文件的任一记录，或者是根据存取命令把读写指针移到欲读写处来读写。
按键存取法
是一种用在复杂文件系统，特别是数据库管理系统中的存取方法，文件的存取是根据给定的键或记录名进行的。

题目：假定你有一台多核处理器电脑，内存较小，硬盘上存储多个可执行的程序（采用多线程设计），每个可执行程序文件都很大，运行时都需要读写文件，硬盘安装有文件系统。操作系统逐一创建进程，调度执行，并最终退出进程，在这个过程当中，操作系统的动态运行时核心过程是什么？在核心过程中每一步涉及到哪些技术（必须包括：文件与文件系统、虚拟内存、进程管理、和简单IO相关知识）？请详细设计出所涉及到的关键技术，以及相关的数据结构、接口或算法流程等。要求图文并茂，正文小四号字且不少于8页word文档。
说明：不是罗列每个知识点的内容，而是结合实际系统运行过程，阐述操作系统的核心功能执行流程。要求有总的流程图，和具体过程的流程图。并可以根据个人情况，扩展设计出新的结构或算法。比如IO缓存、页面置换、进程调度等算法和数据等。

上交截止日期：2020年6月24号中午12点。
上交邮箱：qumingcheng@hit.edu.cn
邮件名：OS2020设计-姓名-学号
上交格式：word文档
操作系统核心功能
（1）调度进程，决定哪个进程运行、挂起、交换等；
（2）分配内存，哪个进程得到内存；
（3）管理和控制文件系统；检查“许可证”、修改目录、路径等；
（4）处理系统调用：由用户的进程发“请求”，系统根据资源的充分利用，统筹安排；
（5） 处理输入输出的请求和工作。

Csrss.exe：这是子系统服务器进程，负责控制Windows创建或删除线程以及16位的虚拟DOS环境。
System Idle Process：这个进程是作为单线程运行在每个处理器上，并在系统不处理其它线程的时候分派处理器的时间。
Smss.exe：这是一个会话管理子系统，负责启动用户会话。
Services.exe：系统服务的管理工具。
Lsass.exe：本地的安全授权服务。
Explorer.exe：资源管理器。
Spoolsv.exe：管理缓冲区中的打印和传真作业。
Svchost.exe：这个进程要着重说明一下，有不少朋友都有这种错觉：若是在“任务管理器”中看到多个Svchost.exe在运行，就觉得是有病毒了。其实并不一定，系统启动的时候，Svchost.exe将检查注册表中的位置来创建需要加载的服务列表，如果多个Svchost.exe同时运行，则表明当前有多组服务处于活动状态；多个DLL文件正在调用它
虚拟内存的访问过程
虚存空间的用户程序按照虚地址编程并存放在辅存中。程序运行时，由地址变换机构依据当时分配给该程序的实地址空间把程序的一部分调入实存。每次访存时，首先判断该虚地址所对应的部分是否在实存中：如果是，则进行地址转换并用实地址访问主存；否则，按照某种算法将辅存中的部分程序调度进内存，再按同样的方法访问主存。 [6] 
由此可见，每个程序的虚地址空间可以远大于实地址空间，也可以远小于实地址空间。后一种情况通常出现在多用户或多任务系统中：实存空间较大，而单个任务并不需要很大的地址空间，较小的虚存空间则可以缩短指令中地址字段的长度。 [6] 
有了虚存的机制后，应用程序就可以透明地使用整个虚存空间。对应用程序而言，如果主存的命中率很高，虚存的访问时间就接近于主存访问时间，而虚存的大小仅仅依赖于辅存的大小。